---
import CartItem from './CartItem.astro';
import ProductCard from './ProductCard.astro';
import Banner from './Banner.astro';

interface Product {
  id: number;
  name: string;
  price: number;
  stock: number;
  category: {
    label: string;
    color: string;
    cap: string;
  };
  description: string;
}

const products: Product[] = [
    {
        id: 1,
        name: "Mechanical Keyboard",
        price: 149.99,
        stock: 15,
        category: { label: "Electronics", color: "blue", cap: "square" },
        description: "Cherry MX switches, PBT keycaps, RGB backlight"
    },
    {
        id: 2,
        name: "Dev Sticker Pack",
        price: 12.99,
        stock: 50,
        category: { label: "Accessories", color: "green", cap: "round" },
        description: "Pack of 10 programming language stickers"
    },
    {
        id: 3,
        name: "Code Mug",
        price: 19.99,
        stock: 30,
        category: { label: "Merch", color: "yellow", cap: "ribbon" },
        description: "Coffee += Code; // 350ml ceramic mug"
    },
    {
        id: 4,
        name: "USB-C Hub",
        price: 79.99,
        stock: 8,
        category: { label: "Electronics", color: "blue", cap: "square" },
        description: "7-in-1 USB-C hub with HDMI, USB 3.0, SD card reader"
    },
    {
        id: 5,
        name: "Developer Hoodie",
        price: 49.99,
        stock: 25,
        category: { label: "Merch", color: "yellow", cap: "ribbon" },
        description: "Comfy hoodie with 'while(sleeping){code()}' print"
    },
    {
        id: 6,
        name: "Wireless Mouse",
        price: 89.99,
        stock: 12,
        category: { label: "Electronics", color: "blue", cap: "square" },
        description: "Ultra-responsive gaming mouse with RGB"
    },
    {
        id: 7,
        name: "Terminal Theme Pack",
        price: 9.99,
        stock: 100,
        category: { label: "Accessories", color: "green", cap: "round" },
        description: "Collection of 5 custom terminal themes"
    },
    {
        id: 8,
        name: "Code Font Bundle",
        price: 29.99,
        stock: 200,
        category: { label: "Accessories", color: "green", cap: "round" },
        description: "5 premium monospace programming fonts"
    }
];

const dealOfTheDay = products[0];
const topCategories = ["Electronics", "Accessories", "Merch"];
---

<column gap-="1" self-="grow" id="ecommerce-app">
  <!-- Top Banners -->
  <row gap-="1">
    <column self-="grow !basis">
      <Banner 
        title="Deal of the Day"
        subtitle={`${dealOfTheDay.name} - $${dealOfTheDay.price}`}
        variant="green"
        icon="f3c1"
      />
    </column>
    <column self-="grow !basis">
      <Banner 
        title="Free Shipping"
        subtitle="On orders over $50"
        variant="blue"
        icon="f0d1"
      />
    </column>
  </row>

  <!-- Main Content -->
  <row gap-="1" self-="grow">
    <!-- Categories Sidebar -->
    <column gap-="1" id="categories" box-="square">
      <column space-="px:1">
        <button size-="small">&#xf0b0; Filter</button>
      </column>
      <column space-="px:1" is-="typography-block">
        <div data-category="all" class="category-item active">&#xf6ff; All Products</div>
        {topCategories.map(cat => (
          <div data-category={cat} class="category-item">
            {cat === "Electronics" && "&#xf553; "}
            {cat === "Accessories" && "&#xf51f; "}
            {cat === "Merch" && "&#xf77b; "}
            {cat}
          </div>
        ))}
        <hr />
        <div>&#xf07a; Cart (<span id="cart-count">0</span>)</div>
        <div>&#xf0c4; Orders</div>
        <div>&#xf004; Wishlist</div>
      </column>
    </column>

    <!-- Product Grid -->
    <column self-="grow !basis" box-="square contain:!top">
      <!-- Category Banners -->
      <row gap-="1" class="category-banners">
        {topCategories.map(cat => (
          <column self-="grow !basis">
            <Banner 
              title={cat}
              subtitle={`Browse our ${cat.toLowerCase()}`}
              variant={cat === "Electronics" ? "blue" : cat === "Accessories" ? "green" : "yellow"}
              icon={cat === "Electronics" ? "f553" : cat === "Accessories" ? "f51f" : "f77b"}
            />
          </column>
        ))}
      </row>

      <column>
        <span is-="badge" variant-="background0">Featured Products</span>
      </column>
      
      <!-- Product Grid -->
      <div id="product-list" class="product-grid">
        {products.map((product) => (
          <ProductCard {...product} />
        ))}
      </div>
    </column>

    <!-- Cart Preview -->
    <column self-="grow !basis" box-="square contain:!top">
      <row>
        <span is-="badge" variant-="background0">Shopping Cart</span>
      </row>

      <!-- Cart Actions -->
      <row align-="between" space-="px:1">
        <row gap-="1">
          <button size-="small" variant-="background1" id="clear-cart">&#xf2ed; Clear</button>
          <button size-="small" variant-="background1" id="update-cart">&#xf021; Update</button>
        </row>
        <button size-="small" variant-="green">&#xf09d; Checkout</button>
      </row>

      <hr />

      <!-- Cart Items -->
      <column gap-="1" space-="px:1" id="cart-items">
        <!-- Cart items will be rendered here -->
      </column>
    </column>
  </row>
</column>

<style>
  #categories {
    min-width: 24ch;
    height: 100%;
  }

  [box-~="square"] {
    --box-border-color: var(--background1);
  }

  .category-item {
    cursor: pointer;
    padding: 0 1ch;
  }

  .category-item:hover {
    background-color: var(--background1);
  }

  .category-item.active {
    background-color: var(--background2);
  }

  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2lh;
    padding: 2lh;
  }

  .category-banners {
    margin-bottom: 2lh;
  }

  @media (max-width: 768px) {
    .product-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script define:vars={{ products }}>
  // State management using a custom store
  const createStore = (initialState) => {
    let state = initialState;
    const listeners = new Set();

    return {
      getState: () => state,
      setState: (newState) => {
        state = { ...state, ...newState };
        listeners.forEach(listener => listener(state));
      },
      subscribe: (listener) => {
        listeners.add(listener);
        return () => listeners.delete(listener);
      }
    };
  };

  // Create store
  const store = createStore({
    cart: [],
    activeCategory: 'all'
  });

  // Cart Operations
  const handleAddToCart = (productId) => {
    const { cart } = store.getState();
    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
      existingItem.quantity += 1;
      store.setState({ cart: [...cart] });
    } else {
      store.setState({ cart: [...cart, { id: productId, quantity: 1 }] });
    }

    // Visual feedback
    const button = document.querySelector(`button[data-product-id="${productId}"]`);
    if (button) {
      const originalHTML = button.innerHTML;
      button.setAttribute('variant-', 'background1');
      button.innerHTML = 'âœ“ Added';
      setTimeout(() => {
        button.setAttribute('variant-', 'green');
        button.innerHTML = originalHTML;
      }, 1000);
    }
  };

  const handleRemoveFromCart = (productId) => {
    const { cart } = store.getState();
    store.setState({
      cart: cart.filter(item => item.id !== productId)
    });
  };

  const handleClearCart = () => {
    store.setState({ cart: [] });
  };

  // Filtering
  const handleCategoryClick = (category) => {
    store.setState({ activeCategory: category });
    
    document.querySelectorAll('.category-item').forEach(item => {
      if (item instanceof HTMLElement) {
        item.classList.toggle('active', item.dataset.category === category);
      }
    });

    document.querySelectorAll('.product-item').forEach(item => {
      if (item instanceof HTMLElement) {
        const productId = Number(item.dataset.productId);
        const product = products.find(p => p.id === productId);
        
        if (!product) return;
        
        if (category === 'all' || product.category.label === category) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      }
    });
  };

  // Render functions
  const updateCartDisplay = () => {
    const { cart } = store.getState();
    const cartItemsContainer = document.getElementById('cart-items');
    const cartCount = document.getElementById('cart-count');
    if (!cartItemsContainer || !cartCount) return;

    // Update cart count
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems.toString();

    if (cart.length === 0) {
      cartItemsContainer.innerHTML = `
        <column box-="round contain:none" class="cart-item">
          <row align-="center">
            <span is-="badge" variant-="background1">
              Cart is empty
            </span>
          </row>
        </column>
      `;
      return;
    }

    // Render cart items
    const cartContent = cart.map(item => {
      const product = products.find(p => p.id === item.id);
      if (!product) return '';
      
      const props = {
        id: product.id,
        name: product.name,
        price: product.price,
        quantity: item.quantity
      };

      const template = document.createElement('template');
      template.innerHTML = `<CartItem ${Object.entries(props).map(([k, v]) => `${k}="${v}"`).join(' ')} />`;
      return template.innerHTML;
    }).join('');

    cartItemsContainer.innerHTML = cartContent;

    // Add subtotal
    const subtotal = cart.reduce((total, item) => {
      const product = products.find(p => p.id === item.id);
      return total + (product?.price || 0) * item.quantity;
    }, 0);

    cartItemsContainer.innerHTML += `
      <hr />
      <row align-="between">
        <span is-="badge" variant-="background0">Subtotal:</span>
        <span is-="badge" variant-="background0">$${subtotal.toFixed(2)}</span>
      </row>
      <button box-="round" variant-="green">Proceed to Checkout &#xf09d;</button>
    `;
  };

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Subscribe to store changes
    store.subscribe(updateCartDisplay);

    // Add to cart buttons
    document.getElementById('product-list')?.addEventListener('click', (e) => {
      const target = e.target;
      if (target && target.classList.contains('add-to-cart-btn')) {
        const productId = Number(target.dataset.productId);
        handleAddToCart(productId);
      }
    });

    // Remove from cart buttons
    document.getElementById('cart-items')?.addEventListener('click', (e) => {
      const target = e.target;
      if (target && target.classList.contains('remove-item-btn')) {
        const productId = Number(target.dataset.productId);
        handleRemoveFromCart(productId);
      }
    });

    // Category filtering
    document.querySelectorAll('.category-item').forEach(item => {
      if (item instanceof HTMLElement) {
        item.addEventListener('click', () => {
          const category = item.dataset.category || 'all';
          handleCategoryClick(category);
        });
      }
    });

    // Cart actions
    document.getElementById('clear-cart')?.addEventListener('click', handleClearCart);
    document.getElementById('update-cart')?.addEventListener('click', updateCartDisplay);

    // Initial render
    updateCartDisplay();
  });
</script>